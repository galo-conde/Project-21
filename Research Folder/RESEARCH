Research for Sprint 1:
-----------------------------------
   #Branodn Abundis#
    -Tasks:
          1). Change player appearance
          2). Add player hearts in UI
          3). Create a dumb AI
          
        *research new sprite template for a character, add scripts for the Player health and enemy Ai.
        
    -Research Links:
            Game design: https://www.youtube.com/watch?v=mAbG8Oi-SvQ&list=PL9FzW-m48fn2SlrW0KoLT4n5egNdX-W9a
            
    -Artifacts: 
            https://bitbucket.org/cs3398-s22-io/blackjack_2d/src/master/src/Player%20scripts/Player.gd
            https://bitbucket.org/cs3398-s22-io/blackjack_2d/src/master/UI/HealthUI.tscn
            https://bitbucket.org/cs3398-s22-io/blackjack_2d/src/master/EnemyNPC/Enemy.tscn
-----------------------------------
   #Galo Conde#
    -Tasks:
          1). Research godot engine
          2). add card deck functionality
          3). Wood box display card value
        *Become familiarized with different Godot Engine elements in sample card game
        Research different ways to implement a working card deck in Godot script.
        
    -Research Links:
            Setting Card Game: https://www.youtube.com/watch?v=WjT5sLMD7Kw&list=PLkhDORpHGmvrW7ByiEL-M9JU_rl27QzmI
            Card game: https://github.com/db0/godot-card-game-framework
            
    -Artifacts: 
            https://bitbucket.org/cs3398-s22-io/blackjack_2d/src/master/Cards/Cards.gd
            https://bitbucket.org/cs3398-s22-io/blackjack_2d/src/master/src/Object%20scripts/WoodBox.gd
-----------------------------------
   #James Helgren#
    -Tasks:
          1). research player/npc pathing
          2). create 'start' screen
          3). Be super comfortable with GitKraken
          
        *I started Sprint 1 by looking into the Godot Engine and its game-creating capabilities after Brandon suggested we use it for the project. 
        After reading up on Godot, my vision for the game design was comparable to PacMan: a player must navigate tight hallways and pick up items (cards) while avoiding enemies (bouncers) chasing him/her.
        Despite never creating a game before, I understood that implementing a “competent” enemy with reasonable pathing to the player would be tricky. After excessive research in Sprint 1, I can definitively say that it is very tricky. 
        I also made a “Start Screen” scene.
        
    -Research Links:
            PacMan Guide: pacmancode.com/vectors
            
    -Artifacts: 
            https://bitbucket.org/cs3398-s22-io/blackjack_2d/src/master/src/GUI%20scripts/StartScreen.gd
            https://bitbucket.org/cs3398-s22-io/blackjack_2d/src/master/GUI/StartScreen.tscn
            https://bitbucket.org/cs3398-s22-io/blackjack_2d/src/master/Screens/
-----------------------------------
   #Ronaldo Amaya#
    -Tasks:
          1). create npc "bouncer" avatar
          2). Learn how godot works
          3). create game over screen
        *Began with looking for a bouncer sprite, however there is not much out there, so I will end up modifing a exist character sprite into a bouncer.
        Looked up tutorials for godot and how the enviornment works.
        Created an endscreen scene
        
   -Research Links:
           edited bouncer sprite: https://www.pixilart.com/draw
           game over scrren: https://www.youtube.com/watch?v=aPN7k7irDnY
           
    -Artifacts: 
            https://bitbucket.org/cs3398-s22-io/blackjack_2d/src/master/GUI/GameOver.tscn
            https://bitbucket.org/cs3398-s22-io/blackjack_2d/src/master/src/GUI%20scripts/GameOver.gd
            
    
________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
Research for sprint 2:

        Brandon Abundis
        • Research Task: Research End Screen menu
        • I am researching endscreens for the game, as it is important for a game to have an endscreen
                research link: https://www.youtube.com/watch?v=aPN7k7irDnY&t=1647s
        • I expect to learn how to use the Ui tools that are provided in Godot. I learned that I need to load a new scene when the player runs out of health:
                Artifact: https://bitbucket.org/cs3398-s22-io/blackjack_2d/src/master/UI/GameOver.tscn
                        this scene will effect the game, and is dependent on the .gd script:
                Artifact: https://bitbucket.org/cs3398-s22-io/blackjack_2d/src/master/src/Player%20scripts/Player.gd
                code:
                        func _on_HurtBox_area_entered(area):
	                        stats.health -= 1
	                        print(stats.health)
	                        hurtBox.start_invincibility(1)
	                        hurtBox.create_hit_effect()
	                        # added for the end screen menu to appear
	                        if stats.health <= 0:
                                get_tree().change_scene("res://UI/GameOver.tscn") <--------how the scene is loaded
                                
        • This implementation will allow the player to choose between restarting the game, or quiting out of the game.
        • the tasks depending on this research task: Implement End Screen
        
________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
Research for Sprint 3:

        Brandon Abundis
        • Research Task: How to get a pop-up menu to work.
        • I went on a research expodistion to find a way for a pop-up menu to appear when a key is hit while the scene is playing.
                research link: https://www.youtube.com/watch?v=WaotOuDNio8
        Artifact: https://bitbucket.org/cs3398-s22-io/blackjack_2d/src/master/src/UI%20scripts/GUI.gd
                code:

                        func _ready():
	                        set_visible(false) <------- technically running in the background

                        func _input(event):
	                        if event.is_action_pressed("ui_tab"): <------- this is an input method
		                        set_visible(!get_tree().paused)
		                        get_tree().paused = !get_tree().paused

                        func set_visible(is_visible):
	                        for node in get_children():
		                        node.visible = is_visible

                        func _on_Return_pressed():
	                        get_tree().paused = false
	                        set_visible(false)
	                        get_tree().change_scene("res://Screens/StartScreen.tscn")

                        func _on_FullScreen_pressed():
	                        get_tree().paused = false
	                        set_visible(false)
	                        OS.window_fullscreen = !OS.window_fullscreen <-------- godot method to allow fullscreen


                        func _on_Exit_pressed():
	                        get_tree().quit()
	
        • This implementation is short and sweet, when the tab key is pressed, then the game pauses and the ui gives you options to click on 
        • the tasks depending on this research task: https://cs3398s22io.atlassian.net/browse/P2-25
        